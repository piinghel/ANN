library(dplyr)
tibble(x = rnorm(100))
tibble(x = rnorm(100),y=rnorm(100))
tibble(x = rnorm(100),y=rnorm(100)+5)
plot(tibble(x = rnorm(100),y=rnorm(100)+5))
plot(tibble(x = rnorm(100),y=x+5))
plot(tibble(x = rnorm(100),y=x+rnorm(0,0.1)))
plot(tibble(x = rnorm(100),y=x+rnorm(100,0,0.1)))
plot(tibble(x = rnorm(100),y=x+rnorm(100,0,0.4)))
tibble(x = rnorm(100),y=x+rnorm(100,0,0.4))
tibble(x = rnorm(100),y1=x+rnorm(100,0,0.4),y1=x+rnorm(100,0,0.9))
tibble(x = rnorm(100),y1=x+rnorm(100,0,0.4),y2=x+rnorm(100,0,0.9))
df <- tibble(x = rnorm(100),y1=x+rnorm(100,0,0.4),y2=x+rnorm(100,0,0.9))
df2 <- read_excel("output/part2.xlsx")
# clean environment
rm(list = ls())
library(readxl)
library(tidyverse)
library(patchwork)
library(plyr)
# own plot library
source("functions/make_boxplot.R")
source("functions/make_barplot.R")
#--------------------------------
# choose theme
THEME <- theme_gray()#theme_minimal()
# remove legend title
LEGEND <- theme(legend.title = element_blank())
df2 <- read_excel("output/part2.xlsx")
df2 %>% dim()
df2 %>% head()
df2 <- read_excel("output/part2.xlsx")
setwd("~/KuLeuven/Semester2/Artificial Neural Networks And Deep Learning (ANN)/2019_2020/Project/ANN/assignment 1")
df2 <- read_excel("output/part2.xlsx")
df2 %>% dim()
df2 %>% head()
# transfer_func
make_barplot(
data = df2,
x = "train_algos",
var_list = list('time', 'mse_val') ,
x_lab_list = list("","Training Algorithm"),
y_lab_list = list("Time (s)", "MSE Validation"),
trans_list = list("log10","log10"),
fill = 'transfer_func',
title_legend_list = list("Transfer Function", NULL)
)
# clean environment
rm(list = ls())
library(readxl)
library(tidyverse)
library(patchwork)
library(plyr)
# own plot library
source("functions/make_boxplot.R")
source("functions/make_barplot.R")
#--------------------------------
# global paramaters
#--------------------------------
# choose theme
THEME <- theme_gray()#theme_minimal()
# remove legend title
LEGEND <- theme(legend.title = element_blank())
df2 <- read_excel("output/part2.xlsx")
df2 %>% dim()
df2 %>% head()
# transfer_func
make_barplot(
data = df2,
x = "train_algos",
var_list = list('time', 'mse_val') ,
x_lab_list = list("","Training Algorithm"),
y_lab_list = list("Time (s)", "MSE Validation"),
trans_list = list("log10","log10"),
fill = 'transfer_func',
title_legend_list = list("Transfer Function", NULL)
)
df2
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mean_mse_val = mse_val)
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mean_mse_val = mse_val)
df2 %>% dplyr::group_by(repetition,mse_val) %>%
dplyr::summarise(mean_mse_val = mse_val)
df2 %>% dplyr::group_by(repetition,mse_val) %>%
dplyr::summarise(mean_mse_val = mse_val)
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mean_mse_val = mse_val)
df2$repetition
df2 %>% dplyr::group_by(repetition)
df2 %>% dplyr::group_by(repetition) %>%
summarise_(mse_val_mean = mse_val)
df2 %>% dplyr::group_by(repetition) %>%
summarise_(mse_val_mean = mse_val)
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise_(mse_val_mean = mse_val)
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mse_val)
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mean(mse_val))
# find best parameters
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
cyl_n = n())
df2
# find best parameters
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
count_algo = count
algo = top_n(1,train_aglos)))
# find best parameters
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
algo = top_n(1,train_aglos)))
# find best parameters
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
algo = top_n(1,train_aglos))
# find best parameters
df2 %>% dplyr::group_by(repetition) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
algo = top_n(1,train_aglos))
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size) %>%
dplyr::summarise(mse_val_mean = mean(mse_val))
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,train_algo) %>%
dplyr::summarise(mse_val_mean = mean(mse_val))
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val))
df2
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,transfer_func,nr_epochs,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val))
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,transfer_func,nr_epochs,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time))
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,transfer_func,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time))
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,transfer_func,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time)) %>% select(mse_val_mean) %>% min
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,transfer_func,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time)) %>% select(mse_val_mean) %>% min
# find best parameters
df2 %>% dplyr::group_by(repetition,hidden_size,transfer_func,train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time))
find
# find best parameters
best_params <-
df2 %>% dplyr::group_by(repetition, hidden_size, transfer_func, train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time))
View(best_params)
View(df2)
df2
# find best parameters: trainbr, 50 hidden size, logsig of transig
best_params <-
df2 %>% dplyr::group_by(repetition, hidden_size, transfer_func, train_algos) %>%
dplyr::summarise(mse_val_mean = mean(mse_val),
mean_time = mean(time),
mean_epoch = mean(nr_epochs))
View(best_params)
best_params %>% order_by(mse_val_mean)
best_params %>% arrange(asc(mse_val_mean))
best_params %>% arrange(desc(mse_val_mean))
best_params %>% arrange(mse_val_mean)
